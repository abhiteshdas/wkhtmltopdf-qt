This is Qt version %VERSION%.

Qt is a comprehensive cross-platform C++ application framework. With
this pre-release you can make advanced graphical applications and
utilize TCP/IP connections. More specifically, these modules are now
available for S60:

QtCore    - http://doc.trolltech.com/4.6-snapshot/qtcore.html
QtGui     - http://doc.trolltech.com/4.6-snapshot/qtgui.html
QtNetwork - http://doc.trolltech.com/4.6-snapshot/qtnetwork.html
QtScript  - http://doc.trolltech.com/4.6-snapshot/qtscript.html
QtSql     - http://doc.trolltech.com/4.6-snapshot/qtsql.html
QtSvg     - http://doc.trolltech.com/4.6-snapshot/qtsvg.html
QtTest    - http://doc.trolltech.com/4.6-snapshot/qttest.html
QtWebKit  - http://doc.trolltech.com/4.6-snapshot/qtwebkit.html
QtXml     - http://doc.trolltech.com/4.6-snapshot/qtxml.html
Phonon    - http://doc.trolltech.com/4.6-snapshot/phonon-module.html

INSTALLING Qt

Follow the instructions in the INSTALL file.

REFERENCE DOCUMENTATION

The Qt reference documentation is available locally in Qt's doc/html
directory or at http://doc.trolltech.com/4.6-snapshot/index.html

SUPPORTED PLATFORMS

For this release, the following platforms have been tested:

   S60 3.1, 3.2 and 5.0
  
with these compilers:

   WINSCW (Emulator, X86)
   RVCT (Hardware, ARM)
   GCCE (Hardware, ARM)*

The current version of GCCE cannot compile the Qt libraries
themselves as it has issues with global static data in DLLs.
However, we supply precompiled Qt libraries compiled with RVCT
that can be used instead. This makes it possible to write and
compile Qt applications using GCCE by linking to these
precompiled binaries. For more information on this issue see:
http://www3.symbian.com/faq.nsf/0/B8542F039C193CCC802573DA0011DFA7

HOW TO REPORT A BUG

We have set up a special mailinglist for feedback on the S60 port.
Bug-reports, feedback or questions all go to this list.
Please go to http://pepper.troll.no/s60prereleases/ 
for details on how to subscribe to the list.

Before posting, please consult the FAQ and the list of known issues:
http://labs.trolltech.com/page/QtforS60FAQ
http://labs.trolltech.com/page/QtforS60KnownIssues

Always include the following information in your bug report: the name
and version number of your compiler; the name and version number of
your operating system; the version of Qt you are using, and what
configure options it was compiled with.

If the problem you are reporting is only visible at run-time, try to
create a small test program that shows the problem when run. Often,
such a program can be created with some minor changes to one of the
many example programs in Qt's examples directory.


                   INSTALLING Qt for S60 Version %VERSION%

1.  Install needed IDE and SDKs

    Make sure you have the following installed:
    
    - Carbide.c++ v2.0.0 or higher: 
      http://www.forum.nokia.com/main/resources/tools_and_sdks/carbide_cpp/
     
      Note: It may be necessary to update the Carbide compiler. 
            See http://pepper.troll.no/s60prereleases/patches/ for instructions 
            how to check your compiler version and how to patch it, if needed.
    
    - S60 Platform SDK 3rd Edition FP1 or higher: 
      http://www.forum.nokia.com/main/resources/tools_and_sdks/S60SDK/
    
    - Open C/C++ v1.6.0 or higher. Install this to all S60 SDKs you plan to use Qt with:
      http://www.forum.nokia.com/main/resources/technologies/openc_cpp/
    
    - Building Qt tools requires a windows compiler, e.g. MinGW 3.4.5 or higher.
      http://www.mingw.org/
    
    - Building Qt libraries for real device requires RVCT 2.2 [build 686] or later:
      http://www.arm.com/products/DevTools/RVCT.html
    
    Make sure you have the following packages installed on any device you want to use to
    run Qt applications. These packages can be found under nokia_plugin directory in any 
    S60 SDK where you have installed Open C/C++:
    
    - nokia_plugin\openc\s60opencsis\pips_s60_<version>.sis
    - nokia_plugin\openc\s60opencsis\openc_ssl_s60_<version>.sis
    - nokia_plugin\opencpp\s60opencppsis\stdcpp_s60_<version>.sis

    These instructions assume the above tools are installed and
    that the enviroment variables for your compiler are set correctly.

    Note: Users of S60 Platform SDK 3rd Edition FP1 also need special updates:
          http://pepper.troll.no/s60prereleases/patches/

2.  Install Qt

    Uncompress the package into the directory you want Qt installed,
    e.g. C:\Qt\%VERSION%. 

    Note: Qt must be installed on the same drive as the S60 SDK you are
    using, and the install path must not contain any whitespaces.

3.  Environment variables

    In order to build and use Qt, the PATH environment variable needs
    to be extended:

        PATH               - to locate qmake, moc and other Qt tools

    This is done by adding c:\Qt\%VERSION%\bin to the PATH variable.

    On Windows the PATH can be extended by navigating to
    "Control Panel->System->Advanced->Environment variables".

    In addition, you must configure the environment for use with the S60
    emulator. This is done by locating the Carbide.c++ submenu on the Start
    menu, and choosing "Configure environment for WINSCW command line".

4.  Configure Qt

    To configure Qt for S60, do:

        cd \Qt\%VERSION%
        configure -platform win32-g++ -xplatform symbian-abld

    For other options, type "configure -help" to get a list of all available
    options.

5.  Build Qt

    To build Qt for the emulator, type:

        make debug-winscw

    To build Qt for the device, type:

        make release-armv5
 
    Congratulations, Qt is now ready to use.

6.  Running Qt demos

    We've included a subset of the Qt demos in this package for you to try out. 
    An excellent starting point is the "fluidlauncher" demo. To run the demo on 
    a real device, you first have to install the Qt libraries on the device:

        cd src\s60installs
        createpackage -i Qt_for_S60_template.pkg release-armv5 <certificate file> <certificate key file>

    Note: You will need to supply certificate that allows installation of 
          binaries with "All -Tcb" capability to your device.

    Similarly, install fluidlauncher to the device:

        cd embedded\fluidlauncher
        createpackage -i fluidlauncher_template.pkg release-armv5

    This will create a self-signed fluidlauncher_release-armv5.sis and install it to your device.

    To run the demos on the emulator simply navigate to the directory of the demo and run:

        make run

    Or, if you need to supply arguments to the program, navigate to 
    %EPOCROOT%\Epoc32\release\winscw\udeb\ and start any of the Qt demos located there,
    for example:

        wiggly.exe -small-screen

    We hope you will enjoy using Qt.
